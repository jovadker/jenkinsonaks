# Azure Disk - Premium SSD - Reclaim policy: retain
# Disk will be available even after deleting the pod 
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: azure-disk-class
  namespace: jenkins
provisioner: kubernetes.io/azure-disk
reclaimPolicy: Retain
parameters:
  storageaccounttype: Premium_LRS
  kind: Managed
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azure-jenkins-disk
  namespace: jenkins
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: azure-disk-class
  #persistentVolumeReclaimPolicy: Retain
  resources:
    requests:
      storage: 10Gi
---
# https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-kubernetes
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      containers:
      - name: jenkins
        image: jenkins/jenkins:lts
        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 2Gi
        ports:
          - name: http-port
            containerPort: 8080
          - name: jnlp-port
            containerPort: 50000
        env:
         - name: JAVA_OPTS
           value: -Djenkins.install.runSetupWizard=false #jenkins controller starts without wizard
        volumeMounts:
          - name: jenkins-vol
            mountPath: /var/jenkins_home
      volumes:
        - name: jenkins-vol
          persistentVolumeClaim:
           claimName: azure-jenkins-disk
          #emptyDir: {}
      securityContext:
          fsGroup: 1000 
          runAsUser: 0
      nodeSelector:
        jenkins: master
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-svc
  namespace: jenkins
spec:
  type: NodePort
  ports:
  - port: 8080
    name: 'http'
    targetPort: 8080
  - port: 50000
    name: 'slave'
    targetPort: 50000
  selector:
    app: jenkins
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-clusterip-svc
  namespace: jenkins
spec:
  type: ClusterIP
  selector:
    app: jenkins
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jenkins-web-app-ingress
  namespace: jenkins
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    cert-manager.io/acme-challenge-type: http01
spec:
  tls:
  - hosts:
    - frontend.<ingressip>.nip.io
    secretName: jenkins-cert-secret-name

  rules:
  - host: frontend.<ingressip>.nip.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
         service:
          name: jenkins-clusterip-svc
          port: 
           number: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: internal-jenkins
  namespace: jenkins
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  selector:
    app: jenkins